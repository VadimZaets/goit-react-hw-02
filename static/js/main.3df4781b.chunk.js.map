{"version":3,"sources":["components/Container/Container.js","components/Statistics/Statistics.js","components/FeedbackOption/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Container","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","leaveFeedback","map","option","type","onClick","Section","title","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","prevGood","prevNeutral","prevBad","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAWeA,MATf,YAAkC,IAAbC,EAAY,EAAZA,SACjB,OAAO,8BAAOA,KCoBHC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,+BACE,wCAAYJ,KACZ,2CAAeC,KACf,uCAAWC,KACX,yCAAaC,KACb,qDAAyBC,EAAzB,WCYSC,MAlBf,YAAsD,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,cAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,KAAK,SAELC,QAAS,kBAAMJ,EAAcE,IAH/B,SAKGA,GAHIA,OCSIG,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOf,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAMe,IACLf,MCKQgB,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAKA,KCyDCC,MAtDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOhB,EAAP,KAAgBkB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOf,EAAP,KAAYkB,EAAZ,KAkBMC,EAAqB,WACzB,OAAOrB,EAAOC,EAAUC,GAO1B,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACE,cAAC,EAAD,CACEP,QAAS,CAAC,OAAQ,UAAW,OAC7BC,cA7BY,SAAAE,GAClB,OAAQA,GACN,IAAK,OACHS,GAAQ,SAAAI,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHH,GAAW,SAAAI,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHH,GAAO,SAAAI,GAAO,OAAIA,EAAU,KAC5B,MACF,QACE,aAoBF,cAAC,EAAD,CAASX,MAAM,aAAf,SACGQ,IACC,cAAC,EAAD,CACErB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,IACPjB,mBAlBDqB,KAAKC,MAAO1B,EAAOqB,IAAwB,MAAQ,IAqBpD,cAAC,EAAD,CAAcN,QAAQ,4BCjDhCY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.3df4781b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nfunction Container({ children }) {\r\n    return <div >{children}</div>;\r\n\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;","import PropTypes from 'prop-types';\r\n\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul >\r\n      <li >Good: {good}</li>\r\n      <li >Neutral: {neutral}</li>\r\n      <li >Bad: {bad}</li>\r\n      <li >Total: {total}</li>\r\n      <li >Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction FeedbackOptions({ options, leaveFeedback }) {\r\n  return options.map(option => (\r\n    <button\r\n      type=\"button\"\r\n      key={option}\r\n      onClick={() => leaveFeedback(option)}\r\n    >\r\n      {option}\r\n    </button>\r\n  ));\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n\r\n  leaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section >\r\n      <h2 >{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction Notification({ message }) {\r\n  return <p >{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import { useState  } from 'react';\nimport Container from './components/Container/Container';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOption/FeedbackOptions';\nimport Section from './components/Section/Section.js';\nimport Notification from './components/Notification/Notification';\n\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const addFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prevGood => prevGood + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1);\n        break;\n      case 'bad':\n        setBad(prevBad => prevBad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100) || 0;\n  };\n\n  return (\n    <Container>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          leaveFeedback={addFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistics>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}